package com.cor.graphx.event

import com.cor.graphx.util.VertexProperty
import scala.collection.mutable.ListBuffer
import org.slf4j.LoggerFactory
import org.apache.log4j.Logger

case class DriverLeftSeatEvent (timestamp: Long, motorbikeId: Integer, location: String, seat_a1: Boolean, seat_a2: Boolean, currentTimestamp1: Long, currentTimestamp2: Long) extends VertexProperty(timestamp){
  
  // ---------------- DRIVERLEFTSEAT ------------------

  def driverLeftSeat(verticesDriverLeftSeat : ListBuffer[(VertexProperty)]) : ListBuffer[(VertexProperty)] = {

    val groupMotorbike = graph.vertices.groupBy(attr => attr._2.asInstanceOf[MotorbikeEvent].motorbikeId)
    val groupMotorbikeOrder = groupMotorbike.map(f => (f._1, f._2.toList.sortBy(f => f._2.asInstanceOf[MotorbikeEvent].currentTimestamp))).collect
    val verticesResult = verticesDriverLeftSeat ++ groupMotorbikeOrder.flatMap(f => isDriverLeftSeat(f._2))
    val driverLeftSeatVertices = sc.parallelize(verticesDriverLeftSeat).zipWithIndex().map(r => (r._2.asInstanceOf[VertexId], r._1))
    val verticesReturn = verticesResult.filter { attr => (System.currentTimeMillis() - attr.currentTimeStamp) < 3000 }
    //graphDriverLeftSeat = Graph(driverLeftSeatVertices, sc.parallelize(ListBuffer[Edge[(Integer, String, Long)]]()))
    return verticesReturn
  }

  def isDriverLeftSeat(list: List[(VertexId, VertexProperty)]): ListBuffer[(VertexProperty)] = {
    val logger: Logger = LoggerFactory.getLogger(this.getClass)
    var result = ListBuffer[(VertexProperty)]()
    for (a <- list; b <- list) {
      if (a._2.asInstanceOf[MotorbikeEvent].seat == true
        && b._2.asInstanceOf[MotorbikeEvent].seat == false
        && b._2.asInstanceOf[MotorbikeEvent].currentTimestamp > a._2.asInstanceOf[MotorbikeEvent].currentTimestamp
        && sc.parallelize(verticesDriverLeftSeat).filter(attr => attr.asInstanceOf[DriverLeftSeatEvent].currentTimestamp1 == a._2.asInstanceOf[MotorbikeEvent].currentTimestamp && attr.asInstanceOf[DriverLeftSeatEvent].currentTimestamp2 == b._2.asInstanceOf[MotorbikeEvent].currentTimestamp).count == 0) {

        val driverLeftSeatEvent = new DriverLeftSeatEvent(System.currentTimeMillis(), a._2.asInstanceOf[MotorbikeEvent].motorbikeId, b._2.asInstanceOf[MotorbikeEvent].location, a._2.asInstanceOf[MotorbikeEvent].seat, b._2.asInstanceOf[MotorbikeEvent].seat, a._2.asInstanceOf[MotorbikeEvent].currentTimestamp, b._2.asInstanceOf[MotorbikeEvent].currentTimestamp)
        logger.info(driverLeftSeatEvent.toString)
        result += driverLeftSeatEvent
      }
    }

    return result
  }
  
  override def toString(): String = {
        return "DriverLeftSeatEvent [" + timestamp +"," + motorbikeId +"," + location + "," + seat_a1 + "," + seat_a2 + "]";
    }
  
}