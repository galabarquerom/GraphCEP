package com.cor.graphx.handler

import scala.collection.mutable.ListBuffer
import org.apache.spark.SparkContext
import org.apache.spark.graphx.Edge
import org.apache.spark.graphx.Graph
import org.apache.spark.graphx.VertexId
import org.slf4j.Logger
import org.slf4j.LoggerFactory

import com.cor.graphx.event.BlowOutTireEvent
import com.cor.graphx.event.CrashEvent
import com.cor.graphx.event.DriverLeftSeatEvent
import com.cor.graphx.event.MotorbikeEvent
import com.cor.graphx.event.OccupantThrownAccidentEvent
import com.cor.graphx.util.VertexProperty
import com.cor.graphx.subscriber.DriverLeftSeatSubscriber
import com.cor.graphx.subscriber.CrashSubscriber
import com.cor.graphx.subscriber.BlowOutTireSubscriber
import com.cor.graphx.subscriber.OccupantThrownAccidentSubscriber


  /**
   * Class to handle events
   */
class MotorbikeEventHandler(sc: SparkContext) {

  
  //Graph structures
  var graph: Graph[(VertexProperty), (String, String, Long)] = Graph(sc.emptyRDD, sc.emptyRDD)
  var vertices = ListBuffer[(VertexProperty)]()
  var edges = ListBuffer[Edge[(String, String, Long)]]()

  var graphCrash: Graph[(VertexProperty), (Integer, String, Long)] = Graph(sc.emptyRDD, sc.emptyRDD)

  var graphBlowOutTire: Graph[(VertexProperty), (Integer, String, Long)] = Graph(sc.emptyRDD, sc.emptyRDD)

  var graphDriverLeftSeat: Graph[(VertexProperty), (Integer, String, Long)] = Graph(sc.emptyRDD, sc.emptyRDD)

  var graphOccupantThrownAccident: Graph[(VertexProperty), (Integer, String, Long)] = Graph(sc.emptyRDD, sc.emptyRDD)

  /**
   * Handle the incoming event.
   */
  def handleVertex(event: VertexProperty) = {
    val logger: Logger = LoggerFactory.getLogger(this.getClass)

    if (event != null) {
      logger.info(event.toString());
      vertices = vertices :+ event
    }

    vertices = vertices.filter { attr => (System.currentTimeMillis() - attr.currentTimeStamp) < 5000 }
    graph = Graph(sc.parallelize(vertices).zipWithIndex().map(r => (r._2.asInstanceOf[VertexId], r._1)), sc.parallelize(edges))
    vertices.foreach(println(_))
  }

  /**
   * Handle the incoming edge.
   */
  def handleEdge(edge: Edge[(String, String, Long)]) = {
    val logger: Logger = LoggerFactory.getLogger(this.getClass)

    if (edge != null) {
      logger.info(edge.toString())
      edges = edges :+ edge
    }

    vertices = vertices.filter { attr => (System.currentTimeMillis() - attr.currentTimeStamp) < 5000 }
    graph = Graph(sc.parallelize(vertices).zipWithIndex().map(r => (r._2.asInstanceOf[VertexId], r._1)), sc.parallelize(edges))

  }
  
  /**
   * Method to init the Service and the rules with an infinite thread
   */
  def initService() {
    val threadDriverLeftSeat = new Thread {
      override def run {
        while (true) {
          driverLeftSeat

        }
      }
    }
    
    val threadCrash = new Thread {
      override def run {
        while (true) {
          crash

        }
      }
    }
    val threadBlowOutTire = new Thread {
      override def run {
        while (true) {
          blowOutTire

        }
      }
    }
    
    val threadOccupantThrownAccident = new Thread {
      override def run {
        while (true) {
          occupantThrownAccident

        }
      }
    }

    threadOccupantThrownAccident.start
    threadBlowOutTire.start
    threadDriverLeftSeat.start
    threadCrash.start

  }

  /**
   * Call to Crash subscriber
   */
  def crash() {

    val c = new CrashSubscriber(sc, graph)

    graphCrash = c.crash()

  }

  /**
   * Call to BlowOutTire subscriber
   */
  def blowOutTire() {

    val bot = new BlowOutTireSubscriber(sc, graph)

    graphBlowOutTire = bot.blowOutTire()

  }
  
  /**
   * Call to DriverLeftSeat subscriber
   */
  def driverLeftSeat() {

    val dls = new DriverLeftSeatSubscriber(sc, graph)

    graphDriverLeftSeat = dls.driverLeftSeat()

  }

  /**
   * Call to OccupantThrownAccident subscriber
   */
  def occupantThrownAccident() {
    val ota = new OccupantThrownAccidentSubscriber(sc, graph)

    graphOccupantThrownAccident = ota.occupantThrownAccident(graphCrash, graphDriverLeftSeat, graphBlowOutTire)
  }

}