package com.cor.graphx

import org.apache.log4j.Level
import org.apache.log4j.Logger

import com.cor.graphx.util.MotorbikeEventGenerator
import com.cor.graphx.event.MotorbikeEvent
import com.cor.graphx.event.CrashEvent
import com.cor.graphx.event.DriverLeftSeatEvent
import com.cor.graphx.event.BlowOutTireEvent
import scala.collection.mutable.ListBuffer
import com.cor.graphx.event.OccupantThrownAccidentEvent
import com.cor.graphx.util.VertexProperty
import org.apache.spark.graphx.Graph
import org.apache.spark.rdd.RDD
import org.apache.spark.graphx.Edge
import org.apache.spark.SparkConf
import org.apache.spark.SparkContext
import com.cor.graphx.handler.MotorbikeEventHandler
import java.util.TimerTask
import java.util.Timer
import java.util.Scanner
import scala.io.Source
import java.util.Properties
import java.io.FileInputStream

object main {

  def main(args: Array[String]) {
    Logger.getLogger("org").setLevel(Level.OFF)

    //Spark configuration
    val conf = new SparkConf().setAppName("Graph").setMaster("local").set("spark.driver.memory", "2g")
    val sc = new SparkContext(conf)

    //Create instance for MotorbikeEventHandler
    val motorbikeEventHandler = new MotorbikeEventHandler(sc)
    motorbikeEventHandler.initService

    // Selecting number of events

    val (nEvents, delay) = try {
      val prop = new Properties()
      prop.load(new FileInputStream("config.properties"))

      (
        prop.getProperty("NUM_EVENTS"),
        prop.getProperty("DELAY").toBoolean)
    } catch {
      case e: Exception =>
        e.printStackTrace()
        sys.exit(1)
    }

    Source.fromInputStream(
      getClass.getClassLoader.getResourceAsStream("config.properties"))

    var param = 0L

    if (!nEvents.isEmpty() && nEvents.matches("[-+]?\\d*\\.?\\d+")) {
      try {
        param = nEvents.toLong
        if (param > 30000L) {
          System.out.println("Error. Test without 30000 events")
          param = 30000L
        }
      } catch {
        case e: NumberFormatException => {
          param = 30000
        }
      }
    } else {
      System.out.println("Error. Test without 30000 events")
      param = 30000L
    }

    // Selecting delay

    System.out.print("Do you want to test with a delay of 1 second between events? (S/N)")
    val option = scanner.nextLine()

    if (!option.isEmpty() && option.matches("[SNsn]")) {

      if (option.equalsIgnoreCase("S")) {
        // Start Demo with delay
        MotorbikeEventGenerator.startSendingMotorbikesReadingsDelay(motorbikeEventHandler, param)
      } else {
        // Start Demo without delay
        MotorbikeEventGenerator.startSendingMotorbikesReadings(motorbikeEventHandler, param)
      }

    } else {
      // Start Demo without delay
      System.out.println("Error. Test without delay")
      MotorbikeEventGenerator.startSendingMotorbikesReadings(motorbikeEventHandler, param)
    }

  }

}